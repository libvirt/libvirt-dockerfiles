#!/usr/bin/env python3

# refresh - Refresh Dockerfiles using lcitool
# Copyright (C) 2019  Andrea Bolognani <abologna@redhat.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

import pathlib
import subprocess
import sys


class MoveAlongException(Exception):
    pass


class Dockerfile:

    PREFIX = "buildenv-"
    CROSS = "-cross-"
    SUFFIX = ".zip"

    # PROJECTS is a dictionary of lists.
    # The key is the project name, as present in the Dockerfile name and
    # the value is a list containing the subprojects which the
    # dependencies should be installed together as.
    PROJECTS = {
        "libvirt" : [
            "libvirt"
        ],
        "libosinfo" : [
            "libosinfo",
            "osinfo-db",
            "osinfo-db-tools",
        ],
    }

    def __init__(self, path):

        # Files that don't end with the expected suffix can be safely
        # ignored
        if not path.suffix == Dockerfile.SUFFIX:
            raise MoveAlongException()

        # Files that don't follow the expected format should be reported
        if not path.stem.startswith(Dockerfile.PREFIX):
            raise Exception("Invalid name '{}'".format(path.stem))

        self.path = path
        stem = path.stem[len(Dockerfile.PREFIX):]

        project_name = None

        # Now that we've removed the prefix, we expect to find the name
        # of one of the known projects, followed by a dash
        for project in Dockerfile.PROJECTS:
            if stem.startswith(project + "-"):
                stem = stem[len(project) + 1:]
                project_name = project
                break

        if not project_name:
            raise Exception("File '{}' does not have any matching "
                            "project.".format(path))

        cross = stem.rfind(Dockerfile.CROSS)

        if cross >= 0:
            # If we found CROSS, then everything before it is the name of
            # the OS and everything after it the name of the architecture
            # we're targeting for cross-compilation
            self.os = stem[:cross]
            self.cross_arch = stem[cross + len(Dockerfile.CROSS):]
        else:
            # Otherwise the entire stem is the name of the OS and there
            # is no cross-compilation architecture
            self.os = stem
            self.cross_arch = None

        self.projects = Dockerfile.PROJECTS[project_name]


    def refresh(self, lcitool):

        dockerfile = pathlib.Path("./Dockerfile")

        args = [
            lcitool,
            "dockerfile",
        ]

        # Pass the cross-compilation architecture if present
        if self.cross_arch is not None:
            args += [
                "--cross-arch",
                self.cross_arch,
            ]

        args += [
            "libvirt-" + self.os,
            ",".join(self.projects)
        ]

        rc = subprocess.run(args, capture_output=True)

        if rc.returncode != 0:
            raise Exception("lcitool failed: {}".format(rc.stderr.decode()))

        with dockerfile.open('w') as f:
            print(rc.stdout.decode().strip(), file=f)

        self.path.unlink()

        args = [
            "zip",
            self.path,
            dockerfile,
        ]

        rc = subprocess.run(args, capture_output=True)

        if rc.returncode != 0:
            raise Exception("zip failed: {}".format(rc.stderr.decode()))

        dockerfile.unlink()


class Application:

    def __init__(self):

        # Find the directory the script lives in
        me = pathlib.Path(sys.argv[0]).resolve()
        self.here = me.parent

        # If an argument has been provided, we're going to consider it as
        # the path to a clone of libvirt-ci.git; otherwise, we're
        # going to assume such a clone exists besides the clone of
        # libvirt-dockerfiles.git we're running the script from
        if len(sys.argv) >= 2:
            ci_repo = pathlib.Path(sys.argv[1]).resolve()
        else:
            ci_repo = self.here.parent.joinpath("libvirt-ci")

        self.lcitool = ci_repo.joinpath("guests").joinpath("lcitool")

        if not self.lcitool.exists():
            raise Exception("{} does not exist".format(self.lcitool))

    def run(self):

        try:
            for item in self.here.iterdir():
                try:
                    dockerfile = Dockerfile(item)
                except MoveAlongException:
                    continue

                print(item.stem + item.suffix)
                dockerfile.refresh(self.lcitool)

        except Exception as ex:
            sys.stderr.write("{}: {}\n".format(sys.argv[0], ex))
            sys.exit(1)


if __name__ == "__main__":
    Application().run()
